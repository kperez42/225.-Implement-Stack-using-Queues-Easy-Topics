/*
    Name: Kevin Daniel Perez Ramirez
    Date: May 23, 2025
    LeetCode Problem: Implement Stack using Queues
    Description:
        This C++ class implements a stack using a single queue (FIFO structure).
        It mimics LIFO behavior (Last In First Out) by rotating elements after every push.
        The most recently added element is always kept at the front of the queue.
*/

#include <queue>   // For using std::queue
using namespace std;

// Class definition for the custom stack
class MyStack {
private:
    queue<int> q;  // Use a single queue to simulate the stack

public:
    // Constructor: Initializes an empty stack
    MyStack() {}

    // Push operation: Adds an element to the top of the stack
    void push(int x) {
        // Step 1: Push the new element to the back of the queue
        q.push(x);

        // Step 2: Rotate the queue to bring the new element to the front
        int size = q.size();  // Get the current size after push

        // Move the first (size - 1) elements to the back of the queue
        // This leaves the newly added element at the front
        for (int i = 0; i < size - 1; ++i) {
            q.push(q.front());  // Enqueue front element to the back
            q.pop();            // Remove it from the front
        }
    }

    // Pop operation: Removes and returns the top element of the stack
    int pop() {
        int val = q.front();  // The top element is at the front due to rotation
        q.pop();              // Remove it from the queue
        return val;           // Return the popped value
    }

    // Top operation: Returns the top element without removing it
    int top() {
        return q.front();     // Front is the "top" of our simulated stack
    }

    // Empty check: Returns true if the stack is empty
    bool empty() {
        return q.empty();     // Check if the queue has no elements
    }
};
